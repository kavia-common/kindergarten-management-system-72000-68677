// Mocks generated by Mockito 5.4.6 from annotations
// in kindergarten_frontend/test/screens/test_splash_screen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:kindergarten_frontend/models/attendance.dart' as _i9;
import 'package:kindergarten_frontend/models/message.dart' as _i13;
import 'package:kindergarten_frontend/models/notification.dart' as _i15;
import 'package:kindergarten_frontend/models/schedule.dart' as _i11;
import 'package:kindergarten_frontend/models/staff.dart' as _i7;
import 'package:kindergarten_frontend/models/student.dart' as _i3;
import 'package:kindergarten_frontend/providers/attendance_provider.dart'
    as _i8;
import 'package:kindergarten_frontend/providers/message_provider.dart' as _i12;
import 'package:kindergarten_frontend/providers/notification_provider.dart'
    as _i14;
import 'package:kindergarten_frontend/providers/schedule_provider.dart' as _i10;
import 'package:kindergarten_frontend/providers/staff_provider.dart' as _i6;
import 'package:kindergarten_frontend/providers/student_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [StudentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentProvider extends _i1.Mock implements _i2.StudentProvider {
  MockStudentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Student> get students =>
      (super.noSuchMethod(
            Invocation.getter(#students),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadStudents() =>
      (super.noSuchMethod(
            Invocation.method(#loadStudents, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#addStudent, [student]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudent, [student]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteStudent(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudent, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i3.Student> getStudentsByClass(String? classId) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentsByClass, [classId]),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  _i3.Student? getStudentById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getStudentById, [id]))
          as _i3.Student?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StaffProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStaffProvider extends _i1.Mock implements _i6.StaffProvider {
  MockStaffProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Staff> get staff =>
      (super.noSuchMethod(Invocation.getter(#staff), returnValue: <_i7.Staff>[])
          as List<_i7.Staff>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadStaff() =>
      (super.noSuchMethod(
            Invocation.method(#loadStaff, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addStaff(_i7.Staff? staff) =>
      (super.noSuchMethod(
            Invocation.method(#addStaff, [staff]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateStaff(_i7.Staff? staff) =>
      (super.noSuchMethod(
            Invocation.method(#updateStaff, [staff]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteStaff(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStaff, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i7.Staff> getTeachers() =>
      (super.noSuchMethod(
            Invocation.method(#getTeachers, []),
            returnValue: <_i7.Staff>[],
          )
          as List<_i7.Staff>);

  @override
  _i7.Staff? getStaffById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getStaffById, [id]))
          as _i7.Staff?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AttendanceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceProvider extends _i1.Mock
    implements _i8.AttendanceProvider {
  MockAttendanceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i9.Attendance> get attendance =>
      (super.noSuchMethod(
            Invocation.getter(#attendance),
            returnValue: <_i9.Attendance>[],
          )
          as List<_i9.Attendance>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadAttendance({DateTime? date}) =>
      (super.noSuchMethod(
            Invocation.method(#loadAttendance, [], {#date: date}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markAttendance(_i9.Attendance? attendance) =>
      (super.noSuchMethod(
            Invocation.method(#markAttendance, [attendance]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAttendance(_i9.Attendance? attendance) =>
      (super.noSuchMethod(
            Invocation.method(#updateAttendance, [attendance]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i9.Attendance> getAttendanceForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getAttendanceForDate, [date]),
            returnValue: <_i9.Attendance>[],
          )
          as List<_i9.Attendance>);

  @override
  _i9.Attendance? getAttendanceForStudent(int? studentId, DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getAttendanceForStudent, [studentId, date]),
          )
          as _i9.Attendance?);

  @override
  Map<_i9.AttendanceStatus, int> getAttendanceStats(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getAttendanceStats, [date]),
            returnValue: <_i9.AttendanceStatus, int>{},
          )
          as Map<_i9.AttendanceStatus, int>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ScheduleProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockScheduleProvider extends _i1.Mock implements _i10.ScheduleProvider {
  MockScheduleProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i11.Schedule> get schedules =>
      (super.noSuchMethod(
            Invocation.getter(#schedules),
            returnValue: <_i11.Schedule>[],
          )
          as List<_i11.Schedule>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  List<String> get uniqueClasses =>
      (super.noSuchMethod(
            Invocation.getter(#uniqueClasses),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadSchedules() =>
      (super.noSuchMethod(
            Invocation.method(#loadSchedules, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addSchedule(_i11.Schedule? schedule) =>
      (super.noSuchMethod(
            Invocation.method(#addSchedule, [schedule]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateSchedule(_i11.Schedule? schedule) =>
      (super.noSuchMethod(
            Invocation.method(#updateSchedule, [schedule]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteSchedule(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSchedule, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i11.Schedule> getSchedulesForDay(String? dayOfWeek) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedulesForDay, [dayOfWeek]),
            returnValue: <_i11.Schedule>[],
          )
          as List<_i11.Schedule>);

  @override
  List<_i11.Schedule> getSchedulesForClass(String? className) =>
      (super.noSuchMethod(
            Invocation.method(#getSchedulesForClass, [className]),
            returnValue: <_i11.Schedule>[],
          )
          as List<_i11.Schedule>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MessageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageProvider extends _i1.Mock implements _i12.MessageProvider {
  MockMessageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i13.Message> get messages =>
      (super.noSuchMethod(
            Invocation.getter(#messages),
            returnValue: <_i13.Message>[],
          )
          as List<_i13.Message>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  List<_i13.Message> get unreadMessages =>
      (super.noSuchMethod(
            Invocation.getter(#unreadMessages),
            returnValue: <_i13.Message>[],
          )
          as List<_i13.Message>);

  @override
  List<_i13.Message> get importantMessages =>
      (super.noSuchMethod(
            Invocation.getter(#importantMessages),
            returnValue: <_i13.Message>[],
          )
          as List<_i13.Message>);

  @override
  int get unreadCount =>
      (super.noSuchMethod(Invocation.getter(#unreadCount), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadMessages() =>
      (super.noSuchMethod(
            Invocation.method(#loadMessages, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> sendMessage(_i13.Message? message) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [message]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markAsRead(int? messageId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [messageId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i13.Message> getMessagesByType(_i13.MessageType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getMessagesByType, [type]),
            returnValue: <_i13.Message>[],
          )
          as List<_i13.Message>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NotificationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationProvider extends _i1.Mock
    implements _i14.NotificationProvider {
  MockNotificationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i15.AppNotification> get notifications =>
      (super.noSuchMethod(
            Invocation.getter(#notifications),
            returnValue: <_i15.AppNotification>[],
          )
          as List<_i15.AppNotification>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  List<_i15.AppNotification> get unreadNotifications =>
      (super.noSuchMethod(
            Invocation.getter(#unreadNotifications),
            returnValue: <_i15.AppNotification>[],
          )
          as List<_i15.AppNotification>);

  @override
  int get unreadCount =>
      (super.noSuchMethod(Invocation.getter(#unreadCount), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#loadNotifications, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addNotification(_i15.AppNotification? notification) =>
      (super.noSuchMethod(
            Invocation.method(#addNotification, [notification]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markAsRead(int? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> dismissNotification(int? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#dismissNotification, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i15.AppNotification> getNotificationsByType(
    _i15.NotificationType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationsByType, [type]),
            returnValue: <_i15.AppNotification>[],
          )
          as List<_i15.AppNotification>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
