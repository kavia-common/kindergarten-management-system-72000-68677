// Mocks generated by Mockito 5.4.6 from annotations
// in kindergarten_frontend/test/screens/test_students_screen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:kindergarten_frontend/models/student.dart' as _i3;
import 'package:kindergarten_frontend/providers/student_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [StudentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentProvider extends _i1.Mock implements _i2.StudentProvider {
  MockStudentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Student> get students =>
      (super.noSuchMethod(
            Invocation.getter(#students),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadStudents() =>
      (super.noSuchMethod(
            Invocation.method(#loadStudents, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#addStudent, [student]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudent, [student]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteStudent(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudent, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i3.Student> getStudentsByClass(String? classId) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentsByClass, [classId]),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  _i3.Student? getStudentById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getStudentById, [id]))
          as _i3.Student?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
