{"is_source_file": true, "format": "Dart", "description": "This file provides a singleton service class 'DatabaseService' for managing local SQLite database operations in a Flutter app. It includes database initialization, schema creation with tables for students, staff, attendance, schedule, messages, and notifications, as well as sample data insertion. The class offers CRUD functionalities for these entities through various methods, facilitating data persistence and retrieval in a kindergarten management system.", "external_files": ["package:sqflite/sqflite.dart", "package:path/path.dart", "../models/student.dart", "../models/staff.dart", "../models/attendance.dart", "../models/schedule.dart", "../models/message.dart", "../models/notification.dart"], "external_methods": ["getDatabasesPath()", "join()", "openDatabase()"], "published": ["DatabaseService"], "classes": [{"name": "DatabaseService", "description": "A singleton class providing database initialization, schema management, sample data seeding, and CRUD operations for a kindergarten management system."}], "methods": [{"name": "instance", "description": "Returns the singleton instance of DatabaseService."}, {"name": "database", "description": "Lazily initializes and returns the database instance."}, {"name": "initDatabase", "description": "Creates the database file and defines the schema with tables for students, staff, attendance, schedule, messages, and notifications."}, {"name": "_onCreate", "description": "Callback to create tables and insert sample data when the database is first created."}, {"name": "_insertSampleData", "description": "Seeds the database with initial sample data for staff, students, schedule, messages, and notifications."}, {"name": "insertStudent", "description": "Inserts a new student record into the database."}, {"name": "getStudents", "description": "Retrieves all active students from the database."}, {"name": "getStudent", "description": "Retrieves a specific student by ID."}, {"name": "updateStudent", "description": "Updates an existing student record."}, {"name": "deleteStudent", "description": "Marks a student as inactive (soft delete)."}, {"name": "insertStaff", "description": "Inserts a new staff member into the database."}, {"name": "getStaff", "description": "Retrieves all active staff members."}, {"name": "getStaffMember", "description": "Retrieves a staff member by ID."}, {"name": "updateStaff", "description": "Updates a staff member's information."}, {"name": "deleteStaff", "description": "Marks a staff member as inactive."}, {"name": "insertAttendance", "description": "Records a new attendance entry."}, {"name": "getAttendance", "description": "Retrieves attendance records, optionally filtered by date."}, {"name": "updateAttendance", "description": "Updates an existing attendance record."}, {"name": "insertSchedule", "description": "Inserts a new schedule entry."}, {"name": "getSchedules", "description": "Retrieves all active schedules."}, {"name": "updateSchedule", "description": "Updates an existing schedule."}, {"name": "deleteSchedule", "description": "Marks a schedule as inactive."}, {"name": "insertMessage", "description": "Creates a new message record."}, {"name": "getMessages", "description": "Retrieves all messages."}, {"name": "updateMessage", "description": "Updates a message record."}, {"name": "insertNotification", "description": "Creates a new notification."}, {"name": "getNotifications", "description": "Retrieves active notifications."}, {"name": "updateNotification", "description": "Updates a notification."}], "calls": ["getDatabasesPath()", "join()", "openDatabase()", "db.execute()", "db.insert()", "db.query()", "db.update()"], "search-terms": ["database schema", "CRUD operations", "sample data", "SQLite", "Flutter local database", "kindergarten management"], "state": 2, "file_id": 26, "knowledge_revision": 54, "git_revision": "", "hash": "1041be2822e3fd60d6b47a05e89db90c", "format-version": 4, "code-base-name": "kindergarten_frontend", "filename": "kindergarten_frontend/lib/services/database_service.dart", "revision_history": [{"54": ""}]}